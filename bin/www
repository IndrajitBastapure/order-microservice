#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('order-service:server');
var http = require('http');
var os = require('os');

var options = {
  "host": process.env.CONSUL_PORT_8500_TCP_ADDR,
  "port": process.env.CONSUL_PORT_8500_TCP_PORT
}

var consul = require('consul')(options);

/*
 * Constants
 */

const ORDER_SERVICE_NAME = "order-service";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('close', onClose);

console.log('Listening on ' + port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  registerConsul(addr);
  debug('Listening on ' + bind);
}

function onClose() {
  deregisterConsul();
}

function registerConsul(addr){
  var serviceData = {
    "name": ORDER_SERVICE_NAME
  };
  if(typeof addr !== 'string'){
    serviceData.address = process.env.ORDER_DOCKER_CONTAINER_NAME;
    serviceData.port = addr.port;
    serviceData.tags = ["nodeJS"];
   /**
	  * serviceData.check = {
      * "id": "api",
      * "name": "HTTP API on port " + addr.port,
      * "http": "http://" + os.hostname() + ":" + addr.port + "/health",
      * "interval": "20s",
      * "timeout": "1s"
    }*/
  } else {
    serviceData.address = addr;
  }
  consul.agent.service.register(serviceData, function(err) {
    if (err) throw err;
    console.log("consul registration successful");
  });
}

function deregisterConsul(){
  consul.agent.service.deregister(ORDER_SERVICE_NAME, function(err) {
    if (err) throw err;
    console.log("deregistration successful");
  });
}